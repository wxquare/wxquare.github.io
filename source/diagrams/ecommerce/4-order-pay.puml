@startuml

!theme plain
skinparam defaultFontName "Microsoft YaHei"
skinparam handwritten false
skinparam shadowing false
skinparam roundcorner 10

' 全局样式
skinparam {
    ParticipantPadding 20
    BoxPadding 10
    DefaultFontSize 12
    DefaultTextAlignment center
    
    SequenceGroupBorderColor #2C3E50
    SequenceGroupBodyBackgroundColor #F8F9FA
    
    ParticipantBackgroundColor #E8F4F9
    ParticipantBorderColor #4C9BC7
    ParticipantFontColor #2C3E50
    
    DatabaseBackgroundColor #F4F6F6
    DatabaseBorderColor #95A5A6
    
    QueueBackgroundColor #FCF3CF
    QueueBorderColor #F1C40F
    
    ArrowColor #2C3E50
    LifeLineBorderColor #95A5A6
    
    NoteBackgroundColor #FFF8DC
    NoteBorderColor #D4AC0D
}

title <size:18>订单支付流程</size>

legend top
|= 状态 |= 说明 |
|<#ECF0F1,#2C3E50>| **订单状态说明** |
| O0: CREATED | 订单创建 |
| O1: PAYMENT_SUCCESS | 支付成功 |
| O2: FULFILLED_SUCCESS | 发货成功 |
| O3: REFUND_SUCCESS | 退款成功 |
| O4: CANCELLED | 订单取消（用户主动取消/超时未支付/支付失败）|
| O5: COMPLETED | 订单完成 |
|<#ECF0F1,#2C3E50>| **支付状态说明** |
| P0: PAYMENT_NOT_STARTED | 未开始 |
| P1: PAYMENT_PENDING | 支付中(用户点击pay按钮，等待支付) |
| P2: MARKETING_Init | 营销初始化 |
| P3: MARKETING_FAILED | 营销扣减失败 |
| P4: MARKETING_SUCCESS | 营销扣减成功 |
| P5: PAYMENT_INITIALIZED | 支付初始化 |
| P6: PAYMENT_INITIALIZED_FAILED | 支付初始化失败 |
| P7: PAYMENT_PROCESSING | 支付处理中（支付系统正在处理支付请求）|
| P8: PAYMENT_SUCCESS | 支付成功 |
| P9: PAYMENT_FAILED | 支付失败 |
| P10: PAYMENT_CANCELLED | 支付取消 |
| P11: PAYMENT_TIMEOUT | 支付超时 |
end legend

' 参与者定义
actor "用户" as User #E8F4F9
participant "订单服务" as OrderService #E8F4F9
database "订单数据库" as OrderDB #F4F6F6
queue "延时队列" as DelayQueue #FCF3CF
queue "OrderBus" as OrderBus #FCF3CF
participant "营销服务" as MarketingService #F9EBEA
participant "支付服务" as PaymentService #EAFAF1

== 步骤1: 支付初始化 ==
User -> OrderService: 点击pay按钮发起支付
activate OrderService
OrderService -> OrderDB: 查询订单信息
activate OrderDB
OrderDB --> OrderService: 返回订单
deactivate OrderDB

alt 订单不存在
    OrderService --> User: Order Not Found
else 订单状态不可支付
    OrderService --> User: Order Status Not Payable
end

OrderService -> OrderDB: 更新订单状态为 <color:red>P1</color>

== 步骤2: 营销扣减 ==
OrderService -> OrderDB: 更新订单状态为 <color:red>P2</color>
OrderService -> MarketingService: 校验营销信息，营销扣减(coin,voucher)
activate MarketingService

alt 营销扣减失败
    MarketingService --> OrderService: Marketing Failed
    OrderService -> OrderDB: 更新订单状态为 <color:red>P3</color>
    OrderService --> User: 营销扣减失败
else 营销扣减成功
    MarketingService --> OrderService: Marketing Success
    OrderService -> OrderDB: 更新订单状态为 <color:red>P4</color>
end
deactivate MarketingService

== 步骤3: 支付初始化 ==
OrderService -> OrderDB: 更新订单状态为 <color:red>P5</color>
OrderService -> PaymentService: 调用支付初始化接口
activate PaymentService

alt 支付初始化失败
    PaymentService --> OrderService: Payment Init Failed
    OrderService -> OrderDB: 更新订单状态为 <color:red>P6</color>
    OrderService -> MarketingService: 支付初始化失败，回滚营销扣减
    
    alt 营销回滚失败
        OrderService -> DelayQueue: 异步延迟回滚营销扣减补偿
    end
    
    OrderService --> User: 支付初始化失败
else 支付初始化成功
    PaymentService --> OrderService: Payment Init Success
    OrderService -> OrderDB: 更新订单状态为 <color:red>P7</color>
    OrderService -> OrderBus: 发送支付初始化成功事件
    OrderService --> User: 返回支付URL
end
deactivate PaymentService

== 步骤4: 支付系统内部支付 ==
User -> PaymentService: 输入支付密码
activate PaymentService
PaymentService -> PaymentService: 执行支付逻辑
alt 支付失败
    PaymentService -> PaymentService: 记录支付失败
else 支付成功
    PaymentService -> PaymentService: 完成支付
end
deactivate PaymentService

== 步骤5: 支付结果回调 ==
PaymentService -> OrderService: 回调支付结果
activate OrderService

alt 支付成功
    OrderService -> OrderDB: 更新支付状态为 <color:red>P8</color>，订单状态为 O1
else 支付失败回调
    OrderService -> OrderDB: 更新支付状态为 <color:red>P9/P10</color>
    OrderService -> OrderBus: 发送支付结果回调事件
    OrderService -> MarketingService: 回滚营销扣减
    
    alt 营销回滚失败
        OrderService -> DelayQueue: 异步延迟回滚营销扣减补偿
    end
end
deactivate OrderService
@enduml