@startmindmap
* 系统稳定性建设

**[#Red] 日常技术设计和变更管控
*** 系统架构设计
**** 异地多活、容错设计、水平扩容
**** 系统保护、限流、熔断保护
**** 离线在线分离、核心和基础分离
**** 资源隔离
*** 变更和发布流程的管控（兼容性）
**** 新版本发布兼容，数据准备，变更流程，服务发布顺序
**** 扩容时注意事项（mysql，redis，kakfa，es，依赖方，监控）
**** DB变更、配置变更、组件变更

**[#Green] 系统调用链路梳理和review
*** 哪些需要梳理
**** 核心链路，比如浏览、下单、支付、履约
**** 大流量接口比如，首页，batch_whitelist
**** 资损接口
*** 调用链路中包含哪些内容
**** 时序图、系统调用图
**** 调用比，请求放大风险
**** 缓存命中率
**** 识别风险点、依赖方
*** 产出数据
**** 哪些接口和逻辑属于核心接口
**** 调用拓扑图或者系统链路图

**[#Red] 监控和告警和review
*** NOC监控：理解为业务监控大盘，最重要的业务指标
*** 业务监控
**** 业务监控大盘：所有接口，QPS、成功率（系统）、成功率（业务）、耗时（95线、均线、99线）
**** 单接口详情，QPS、成功率（系统）、成功率（业务）、耗时（95线、均线、99线）
**** 各阶段转化率：下单、支付、支付回调、发货
**** 网关限流
*** 应用监控（容器）
**** 应用指标大盘
**** 应用指标详细
**** cpu、内存、网络
*** 中间件监控
**** mysql、redis、es、kafka
**** 中间件大盘
**** 中间件详细
*** 依赖方监控
**** 履约、支付、供应商等
*** 其它
**** 缓存命中率
**** 变价率
*** 告警
**** 告警阈值
**** 接受人

left side
**[#Red] 资损体系建设
*** 事前规避
**** 风险场景梳理
***** 系统间数据一致性
***** 幂等
***** 数据库更新机制，锁机制
***** 并发导致的问题

*** 事中及时发现
**** 在线业务逻辑校验
**** 旁路核对
***** 实时（秒级别）数据核对
***** 小时对账
***** 天级别对账 (hive)
*** 事后复盘总结与定级别

**[#Red] 风控体系建设
*** 风控规则设置
**** 小时、日、周、月
**** 用户、设备
**** 业务规则
**** 规则引擎
**** 风控block告警、monitor

**[#Red] 性能优化
*** 性能原因
**** 流量上涨
**** 商品上涨
**** 历史数据累计
*** 业务架构和逻辑优化
**** 同步异步
**** 缓存
*** 中间件优化
**** mysql、redis、es、kafka


**[#Orange] 大促保障
*** 流量和容量规划
**** 常规流量：流量模型，大促流量
**** 非常规流量
*** 全链路压测
**** 数据准备
**** 全链路压测，安全值
**** 压测结果整理

*** 应急预案
**** 功能降级
**** 接口限流
**** 依赖方团队对接人
**** 关闭入口、商品维护

*** 沙盘推演和大促演练
**** 破坏组
**** 定位组
*** 事后复盘


@endmindmap